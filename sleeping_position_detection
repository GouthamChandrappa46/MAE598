{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/GouthamChandrappa46/MAE598/blob/main/sleeping_position_detection\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "Ur0KLHJn1pSG"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import tensorflow as tf\n",
        "from matplotlib import pyplot as plt"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "uploaded=files.upload()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 73
        },
        "id": "HOupeeAV3g14",
        "outputId": "5198416b-066c-4deb-f3fe-800407e9ddde"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-b0f62897-48f7-4db8-b2d3-2841fe2924df\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-b0f62897-48f7-4db8-b2d3-2841fe2924df\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving final.csv to final (1).csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df=pd.read_csv('final.csv') #reading the csv files\n",
        "print(df.head(100))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uvN9vcJ-MdpA",
        "outputId": "1a469fda-30df-4d72-fbf9-3ff174a7273c"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "       X     Y     Z Position\n",
            "0   0.00 -0.02  0.96   supine\n",
            "1   0.00 -0.01  0.96   supine\n",
            "2   0.00 -0.02  0.96   supine\n",
            "3   0.00 -0.01  0.96   supine\n",
            "4   0.00 -0.01  0.96   supine\n",
            "..   ...   ...   ...      ...\n",
            "95 -0.09  0.04 -1.02    prone\n",
            "96 -0.06  0.04 -1.01    prone\n",
            "97 -0.06  0.03 -1.01    prone\n",
            "98 -0.06  0.01 -1.01    prone\n",
            "99 -0.06 -0.01 -1.01    prone\n",
            "\n",
            "[100 rows x 4 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df[['X','Y','Z']] = df[['X','Y','Z']].rolling(200).mean()   # Using rolling mean for a sliding window of 2 seconds\n",
        "df[['X','Y','Z']] += 0.05*df[['X','Y','Z']]                 #Introducing a noise in the data\n",
        "df= df[199:]\n",
        "print(df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VzhWsxOE4AdS",
        "outputId": "33a0ac8a-5450-4dcf-cf95-064488a4e2bf"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              X         Y         Z Position\n",
            "199    0.049822 -0.032183 -0.016380  Sitting\n",
            "200    0.054862 -0.031710 -0.020370  Sitting\n",
            "201    0.059850 -0.031290 -0.024465  Sitting\n",
            "202    0.064890 -0.030870 -0.028560  Sitting\n",
            "203    0.069930 -0.030503 -0.032603  Sitting\n",
            "...         ...       ...       ...      ...\n",
            "36157 -0.012652 -0.019897  1.028370   supine\n",
            "36158 -0.012652 -0.019898  1.028370   supine\n",
            "36159 -0.012652 -0.019950  1.028370   supine\n",
            "36160 -0.012652 -0.020055  1.028370   supine\n",
            "36161 -0.012652 -0.020160  1.028370   supine\n",
            "\n",
            "[35963 rows x 4 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X,y=df[['X','Y','Z']],df['Position']          # Separating the features and labels respectively\n",
        "print(X)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_FYtX4dJ5AMA",
        "outputId": "c17070cf-b437-48a2-aa24-fa65e42098f4"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              X         Y         Z\n",
            "199    0.049822 -0.032183 -0.016380\n",
            "200    0.054862 -0.031710 -0.020370\n",
            "201    0.059850 -0.031290 -0.024465\n",
            "202    0.064890 -0.030870 -0.028560\n",
            "203    0.069930 -0.030503 -0.032603\n",
            "...         ...       ...       ...\n",
            "36157 -0.012652 -0.019897  1.028370\n",
            "36158 -0.012652 -0.019898  1.028370\n",
            "36159 -0.012652 -0.019950  1.028370\n",
            "36160 -0.012652 -0.020055  1.028370\n",
            "36161 -0.012652 -0.020160  1.028370\n",
            "\n",
            "[35963 rows x 3 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import LabelEncoder    # Importing LabelEncoder library\n",
        "encoder = LabelEncoder()                          #encoding the Positions column to convert it to numerical values\n",
        "y2 = encoder.fit_transform(y)\n",
        "print(y2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "z9R-shup5U01",
        "outputId": "5373c221-32f9-4bb9-dc04-98996c1c9279"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1 1 1 ... 4 4 4]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Y=pd.get_dummies(y2).values\n",
        "print(Y[:])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wD1-5L3Z58Zx",
        "outputId": "53922919-2d96-4794-f1bb-5dbcfabc9d01"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[0 1 0 0 0]\n",
            " [0 1 0 0 0]\n",
            " [0 1 0 0 0]\n",
            " ...\n",
            " [0 0 0 0 1]\n",
            " [0 0 0 0 1]\n",
            " [0 0 0 0 1]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split                    #importing train_test library\n",
        "X_train,X_test,Y_train,Y_test=train_test_split(X,Y,train_size=0.6)      #training data size of 60%\n",
        "X_val,X_test,Y_val,Y_test=train_test_split(X,Y,test_size=0.2)           # validation and testing data size of 20% each\n",
        "print(X_train[0:5])\n",
        "print(Y_train[0:5])\n",
        "print(Y_val[0:5])\n",
        "print(Y_val.shape)\n",
        "print(Y_test.shape)\n",
        "print(Y_train.shape)\n",
        "plt.plot(X_train,Y_train[:,0],'r.')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 812
        },
        "id": "0cqWwCo76K6D",
        "outputId": "dfb47af8-7452-4241-deb2-cd1d47761982"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              X         Y         Z\n",
            "34786 -0.047512 -0.138915  0.905992\n",
            "6218  -0.032025 -0.192623 -0.864833\n",
            "27644  0.046253 -0.680820 -0.531405\n",
            "21206  1.020915  0.044625  0.087885\n",
            "24894 -0.374115 -0.080640  0.831285\n",
            "[[0 0 0 0 1]\n",
            " [1 0 0 0 0]\n",
            " [0 0 0 1 0]\n",
            " [0 1 0 0 0]\n",
            " [0 1 0 0 0]]\n",
            "[[0 1 0 0 0]\n",
            " [0 0 1 0 0]\n",
            " [0 1 0 0 0]\n",
            " [1 0 0 0 0]\n",
            " [0 1 0 0 0]]\n",
            "(28770, 5)\n",
            "(7193, 5)\n",
            "(21577, 5)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x79ee9634ebf0>,\n",
              " <matplotlib.lines.Line2D at 0x79ee9634ecb0>,\n",
              " <matplotlib.lines.Line2D at 0x79ee9634eda0>]"
            ]
          },
          "metadata": {},
          "execution_count": 10
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from tensorflow import keras\n",
        "from keras import layers\n",
        "model_1=keras.Sequential()       #importing Sequential neural networks\n",
        "model_1.add(layers.Dense(512, input_dim = 3,  activation=\"relu\"))\n",
        "model_1.add(layers.Dense(256, activation=\"relu\"))\n",
        "model_1.add(layers.Dense(128, activation=\"relu\"))  #Using sigmoid, relu and tanh activation functions\n",
        "model_1.add(layers.Dense(64,activation=\"relu\"))                #Building a dense neural network of 3 layers\n",
        "model_1.add(layers.Dense(5,activation=\"softmax\"))\n",
        "optimizer = keras.optimizers.Adam(learning_rate=0.001)\n",
        "model_1.compile(optimizer=optimizer, loss='mse',metrics=['acc'])     # Calculating accuracy for the network\n",
        "model_1.summary()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "grQcMZwQ9BiM",
        "outputId": "173db8b8-039d-4d01-bf69-caedecab8362"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " dense (Dense)               (None, 512)               2048      \n",
            "                                                                 \n",
            " dense_1 (Dense)             (None, 256)               131328    \n",
            "                                                                 \n",
            " dense_2 (Dense)             (None, 128)               32896     \n",
            "                                                                 \n",
            " dense_3 (Dense)             (None, 64)                8256      \n",
            "                                                                 \n",
            " dense_4 (Dense)             (None, 5)                 325       \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 174853 (683.02 KB)\n",
            "Trainable params: 174853 (683.02 KB)\n",
            "Non-trainable params: 0 (0.00 Byte)\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "result_1=model_1.fit(X,Y,epochs=300,batch_size=400)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mesFoUrn9WRh",
        "outputId": "68a1d1ce-2381-4911-a301-97c4a634d67f"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/300\n",
            "90/90 [==============================] - 3s 15ms/step - loss: 0.1010 - acc: 0.6471\n",
            "Epoch 2/300\n",
            "90/90 [==============================] - 1s 16ms/step - loss: 0.0895 - acc: 0.6763\n",
            "Epoch 3/300\n",
            "90/90 [==============================] - 2s 23ms/step - loss: 0.0862 - acc: 0.6871\n",
            "Epoch 4/300\n",
            "90/90 [==============================] - 1s 16ms/step - loss: 0.0849 - acc: 0.6921\n",
            "Epoch 5/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0821 - acc: 0.7016\n",
            "Epoch 6/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0805 - acc: 0.7080\n",
            "Epoch 7/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0786 - acc: 0.7174\n",
            "Epoch 8/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0766 - acc: 0.7253\n",
            "Epoch 9/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0744 - acc: 0.7358\n",
            "Epoch 10/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0735 - acc: 0.7393\n",
            "Epoch 11/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0715 - acc: 0.7483\n",
            "Epoch 12/300\n",
            "90/90 [==============================] - 2s 20ms/step - loss: 0.0692 - acc: 0.7567\n",
            "Epoch 13/300\n",
            "90/90 [==============================] - 2s 22ms/step - loss: 0.0677 - acc: 0.7629\n",
            "Epoch 14/300\n",
            "90/90 [==============================] - 1s 13ms/step - loss: 0.0671 - acc: 0.7665\n",
            "Epoch 15/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0658 - acc: 0.7722\n",
            "Epoch 16/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0643 - acc: 0.7785\n",
            "Epoch 17/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0635 - acc: 0.7826\n",
            "Epoch 18/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0622 - acc: 0.7851\n",
            "Epoch 19/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0617 - acc: 0.7881\n",
            "Epoch 20/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0612 - acc: 0.7894\n",
            "Epoch 21/300\n",
            "90/90 [==============================] - 1s 15ms/step - loss: 0.0606 - acc: 0.7930\n",
            "Epoch 22/300\n",
            "90/90 [==============================] - 3s 33ms/step - loss: 0.0589 - acc: 0.8016\n",
            "Epoch 23/300\n",
            "90/90 [==============================] - 1s 15ms/step - loss: 0.0589 - acc: 0.7994\n",
            "Epoch 24/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0580 - acc: 0.8044\n",
            "Epoch 25/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0582 - acc: 0.8027\n",
            "Epoch 26/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0570 - acc: 0.8060\n",
            "Epoch 27/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0563 - acc: 0.8098\n",
            "Epoch 28/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0556 - acc: 0.8126\n",
            "Epoch 29/300\n",
            "90/90 [==============================] - 2s 20ms/step - loss: 0.0549 - acc: 0.8154\n",
            "Epoch 30/300\n",
            "90/90 [==============================] - 2s 27ms/step - loss: 0.0544 - acc: 0.8153\n",
            "Epoch 31/300\n",
            "90/90 [==============================] - 2s 26ms/step - loss: 0.0530 - acc: 0.8228\n",
            "Epoch 32/300\n",
            "90/90 [==============================] - 1s 15ms/step - loss: 0.0532 - acc: 0.8207\n",
            "Epoch 33/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0524 - acc: 0.8252\n",
            "Epoch 34/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0508 - acc: 0.8305\n",
            "Epoch 35/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0521 - acc: 0.8267\n",
            "Epoch 36/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0498 - acc: 0.8357\n",
            "Epoch 37/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0498 - acc: 0.8356\n",
            "Epoch 38/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0497 - acc: 0.8354\n",
            "Epoch 39/300\n",
            "90/90 [==============================] - 2s 18ms/step - loss: 0.0505 - acc: 0.8335\n",
            "Epoch 40/300\n",
            "90/90 [==============================] - 2s 22ms/step - loss: 0.0490 - acc: 0.8389\n",
            "Epoch 41/300\n",
            "90/90 [==============================] - 1s 15ms/step - loss: 0.0489 - acc: 0.8396\n",
            "Epoch 42/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0486 - acc: 0.8407\n",
            "Epoch 43/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0481 - acc: 0.8418\n",
            "Epoch 44/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0469 - acc: 0.8455\n",
            "Epoch 45/300\n",
            "90/90 [==============================] - 1s 15ms/step - loss: 0.0474 - acc: 0.8442\n",
            "Epoch 46/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0468 - acc: 0.8468\n",
            "Epoch 47/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0464 - acc: 0.8487\n",
            "Epoch 48/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0461 - acc: 0.8504\n",
            "Epoch 49/300\n",
            "90/90 [==============================] - 2s 23ms/step - loss: 0.0462 - acc: 0.8482\n",
            "Epoch 50/300\n",
            "90/90 [==============================] - 2s 20ms/step - loss: 0.0462 - acc: 0.8495\n",
            "Epoch 51/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0447 - acc: 0.8542\n",
            "Epoch 52/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0454 - acc: 0.8520\n",
            "Epoch 53/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0449 - acc: 0.8531\n",
            "Epoch 54/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0454 - acc: 0.8514\n",
            "Epoch 55/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0437 - acc: 0.8595\n",
            "Epoch 56/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0431 - acc: 0.8604\n",
            "Epoch 57/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0437 - acc: 0.8572\n",
            "Epoch 58/300\n",
            "90/90 [==============================] - 2s 20ms/step - loss: 0.0441 - acc: 0.8559\n",
            "Epoch 59/300\n",
            "90/90 [==============================] - 2s 22ms/step - loss: 0.0439 - acc: 0.8562\n",
            "Epoch 60/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0433 - acc: 0.8590\n",
            "Epoch 61/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0420 - acc: 0.8634\n",
            "Epoch 62/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0421 - acc: 0.8632\n",
            "Epoch 63/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0443 - acc: 0.8563\n",
            "Epoch 64/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0423 - acc: 0.8624\n",
            "Epoch 65/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0419 - acc: 0.8635\n",
            "Epoch 66/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0428 - acc: 0.8602\n",
            "Epoch 67/300\n",
            "90/90 [==============================] - 1s 15ms/step - loss: 0.0428 - acc: 0.8595\n",
            "Epoch 68/300\n",
            "90/90 [==============================] - 2s 22ms/step - loss: 0.0412 - acc: 0.8670\n",
            "Epoch 69/300\n",
            "90/90 [==============================] - 2s 18ms/step - loss: 0.0417 - acc: 0.8627\n",
            "Epoch 70/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0419 - acc: 0.8632\n",
            "Epoch 71/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0410 - acc: 0.8670\n",
            "Epoch 72/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0407 - acc: 0.8672\n",
            "Epoch 73/300\n",
            "90/90 [==============================] - 1s 15ms/step - loss: 0.0409 - acc: 0.8670\n",
            "Epoch 74/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0417 - acc: 0.8630\n",
            "Epoch 75/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0409 - acc: 0.8652\n",
            "Epoch 76/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0404 - acc: 0.8676\n",
            "Epoch 77/300\n",
            "90/90 [==============================] - 2s 19ms/step - loss: 0.0409 - acc: 0.8659\n",
            "Epoch 78/300\n",
            "90/90 [==============================] - 2s 23ms/step - loss: 0.0420 - acc: 0.8616\n",
            "Epoch 79/300\n",
            "90/90 [==============================] - 1s 15ms/step - loss: 0.0402 - acc: 0.8679\n",
            "Epoch 80/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0396 - acc: 0.8693\n",
            "Epoch 81/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0398 - acc: 0.8695\n",
            "Epoch 82/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0402 - acc: 0.8683\n",
            "Epoch 83/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0389 - acc: 0.8733\n",
            "Epoch 84/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0397 - acc: 0.8697\n",
            "Epoch 85/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0395 - acc: 0.8702\n",
            "Epoch 86/300\n",
            "90/90 [==============================] - 1s 15ms/step - loss: 0.0393 - acc: 0.8710\n",
            "Epoch 87/300\n",
            "90/90 [==============================] - 2s 22ms/step - loss: 0.0402 - acc: 0.8684\n",
            "Epoch 88/300\n",
            "90/90 [==============================] - 2s 19ms/step - loss: 0.0389 - acc: 0.8715\n",
            "Epoch 89/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0388 - acc: 0.8725\n",
            "Epoch 90/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0380 - acc: 0.8756\n",
            "Epoch 91/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0389 - acc: 0.8726\n",
            "Epoch 92/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0383 - acc: 0.8741\n",
            "Epoch 93/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0382 - acc: 0.8750\n",
            "Epoch 94/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0379 - acc: 0.8753\n",
            "Epoch 95/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0379 - acc: 0.8761\n",
            "Epoch 96/300\n",
            "90/90 [==============================] - 2s 18ms/step - loss: 0.0387 - acc: 0.8736\n",
            "Epoch 97/300\n",
            "90/90 [==============================] - 2s 23ms/step - loss: 0.0382 - acc: 0.8746\n",
            "Epoch 98/300\n",
            "90/90 [==============================] - 1s 15ms/step - loss: 0.0379 - acc: 0.8752\n",
            "Epoch 99/300\n",
            "90/90 [==============================] - 1s 15ms/step - loss: 0.0395 - acc: 0.8692\n",
            "Epoch 100/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0379 - acc: 0.8753\n",
            "Epoch 101/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0373 - acc: 0.8773\n",
            "Epoch 102/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0377 - acc: 0.8751\n",
            "Epoch 103/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0368 - acc: 0.8786\n",
            "Epoch 104/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0378 - acc: 0.8759\n",
            "Epoch 105/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0376 - acc: 0.8763\n",
            "Epoch 106/300\n",
            "90/90 [==============================] - 2s 21ms/step - loss: 0.0368 - acc: 0.8789\n",
            "Epoch 107/300\n",
            "90/90 [==============================] - 2s 20ms/step - loss: 0.0382 - acc: 0.8743\n",
            "Epoch 108/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0366 - acc: 0.8796\n",
            "Epoch 109/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0369 - acc: 0.8791\n",
            "Epoch 110/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0366 - acc: 0.8796\n",
            "Epoch 111/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0368 - acc: 0.8793\n",
            "Epoch 112/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0364 - acc: 0.8805\n",
            "Epoch 113/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0364 - acc: 0.8787\n",
            "Epoch 114/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0379 - acc: 0.8743\n",
            "Epoch 115/300\n",
            "90/90 [==============================] - 2s 17ms/step - loss: 0.0370 - acc: 0.8795\n",
            "Epoch 116/300\n",
            "90/90 [==============================] - 2s 22ms/step - loss: 0.0356 - acc: 0.8834\n",
            "Epoch 117/300\n",
            "90/90 [==============================] - 1s 16ms/step - loss: 0.0363 - acc: 0.8812\n",
            "Epoch 118/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0359 - acc: 0.8814\n",
            "Epoch 119/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0363 - acc: 0.8807\n",
            "Epoch 120/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0357 - acc: 0.8825\n",
            "Epoch 121/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0363 - acc: 0.8798\n",
            "Epoch 122/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0358 - acc: 0.8826\n",
            "Epoch 123/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0364 - acc: 0.8803\n",
            "Epoch 124/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0368 - acc: 0.8784\n",
            "Epoch 125/300\n",
            "90/90 [==============================] - 2s 21ms/step - loss: 0.0351 - acc: 0.8843\n",
            "Epoch 126/300\n",
            "90/90 [==============================] - 2s 21ms/step - loss: 0.0357 - acc: 0.8840\n",
            "Epoch 127/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0352 - acc: 0.8852\n",
            "Epoch 128/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0363 - acc: 0.8806\n",
            "Epoch 129/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0365 - acc: 0.8809\n",
            "Epoch 130/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0354 - acc: 0.8830\n",
            "Epoch 131/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0343 - acc: 0.8872\n",
            "Epoch 132/300\n",
            "90/90 [==============================] - 1s 15ms/step - loss: 0.0345 - acc: 0.8877\n",
            "Epoch 133/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0353 - acc: 0.8836\n",
            "Epoch 134/300\n",
            "90/90 [==============================] - 2s 18ms/step - loss: 0.0344 - acc: 0.8871\n",
            "Epoch 135/300\n",
            "90/90 [==============================] - 2s 23ms/step - loss: 0.0362 - acc: 0.8810\n",
            "Epoch 136/300\n",
            "90/90 [==============================] - 1s 16ms/step - loss: 0.0353 - acc: 0.8842\n",
            "Epoch 137/300\n",
            "90/90 [==============================] - 1s 15ms/step - loss: 0.0350 - acc: 0.8859\n",
            "Epoch 138/300\n",
            "90/90 [==============================] - 1s 15ms/step - loss: 0.0347 - acc: 0.8874\n",
            "Epoch 139/300\n",
            "90/90 [==============================] - 1s 15ms/step - loss: 0.0359 - acc: 0.8812\n",
            "Epoch 140/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0356 - acc: 0.8838\n",
            "Epoch 141/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0352 - acc: 0.8845\n",
            "Epoch 142/300\n",
            "90/90 [==============================] - 1s 15ms/step - loss: 0.0351 - acc: 0.8844\n",
            "Epoch 143/300\n",
            "90/90 [==============================] - 1s 16ms/step - loss: 0.0349 - acc: 0.8845\n",
            "Epoch 144/300\n",
            "90/90 [==============================] - 2s 22ms/step - loss: 0.0343 - acc: 0.8870\n",
            "Epoch 145/300\n",
            "90/90 [==============================] - 2s 18ms/step - loss: 0.0339 - acc: 0.8899\n",
            "Epoch 146/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0356 - acc: 0.8832\n",
            "Epoch 147/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0345 - acc: 0.8865\n",
            "Epoch 148/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0341 - acc: 0.8872\n",
            "Epoch 149/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0347 - acc: 0.8855\n",
            "Epoch 150/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0342 - acc: 0.8882\n",
            "Epoch 151/300\n",
            "90/90 [==============================] - 1s 15ms/step - loss: 0.0342 - acc: 0.8873\n",
            "Epoch 152/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0346 - acc: 0.8864\n",
            "Epoch 153/300\n",
            "90/90 [==============================] - 2s 21ms/step - loss: 0.0344 - acc: 0.8868\n",
            "Epoch 154/300\n",
            "90/90 [==============================] - 2s 22ms/step - loss: 0.0346 - acc: 0.8862\n",
            "Epoch 155/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0346 - acc: 0.8861\n",
            "Epoch 156/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0334 - acc: 0.8908\n",
            "Epoch 157/300\n",
            "90/90 [==============================] - 2s 19ms/step - loss: 0.0343 - acc: 0.8877\n",
            "Epoch 158/300\n",
            "90/90 [==============================] - 3s 30ms/step - loss: 0.0336 - acc: 0.8897\n",
            "Epoch 159/300\n",
            "90/90 [==============================] - 3s 28ms/step - loss: 0.0348 - acc: 0.8853\n",
            "Epoch 160/300\n",
            "90/90 [==============================] - 3s 35ms/step - loss: 0.0340 - acc: 0.8871\n",
            "Epoch 161/300\n",
            "90/90 [==============================] - 3s 30ms/step - loss: 0.0330 - acc: 0.8911\n",
            "Epoch 162/300\n",
            "90/90 [==============================] - 3s 28ms/step - loss: 0.0336 - acc: 0.8901\n",
            "Epoch 163/300\n",
            "90/90 [==============================] - 2s 27ms/step - loss: 0.0343 - acc: 0.8866\n",
            "Epoch 164/300\n",
            "90/90 [==============================] - 3s 29ms/step - loss: 0.0345 - acc: 0.8868\n",
            "Epoch 165/300\n",
            "90/90 [==============================] - 3s 32ms/step - loss: 0.0329 - acc: 0.8926\n",
            "Epoch 166/300\n",
            "90/90 [==============================] - 3s 31ms/step - loss: 0.0336 - acc: 0.8903\n",
            "Epoch 167/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0331 - acc: 0.8922\n",
            "Epoch 168/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0332 - acc: 0.8915\n",
            "Epoch 169/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0335 - acc: 0.8896\n",
            "Epoch 170/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0333 - acc: 0.8919\n",
            "Epoch 171/300\n",
            "90/90 [==============================] - 1s 15ms/step - loss: 0.0332 - acc: 0.8898\n",
            "Epoch 172/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0328 - acc: 0.8924\n",
            "Epoch 173/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0345 - acc: 0.8862\n",
            "Epoch 174/300\n",
            "90/90 [==============================] - 2s 23ms/step - loss: 0.0333 - acc: 0.8922\n",
            "Epoch 175/300\n",
            "90/90 [==============================] - 2s 20ms/step - loss: 0.0333 - acc: 0.8919\n",
            "Epoch 176/300\n",
            "90/90 [==============================] - 1s 15ms/step - loss: 0.0332 - acc: 0.8912\n",
            "Epoch 177/300\n",
            "90/90 [==============================] - 1s 15ms/step - loss: 0.0331 - acc: 0.8918\n",
            "Epoch 178/300\n",
            "90/90 [==============================] - 1s 15ms/step - loss: 0.0325 - acc: 0.8935\n",
            "Epoch 179/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0332 - acc: 0.8899\n",
            "Epoch 180/300\n",
            "90/90 [==============================] - 1s 15ms/step - loss: 0.0326 - acc: 0.8928\n",
            "Epoch 181/300\n",
            "90/90 [==============================] - 1s 15ms/step - loss: 0.0324 - acc: 0.8944\n",
            "Epoch 182/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0332 - acc: 0.8907\n",
            "Epoch 183/300\n",
            "90/90 [==============================] - 2s 22ms/step - loss: 0.0326 - acc: 0.8938\n",
            "Epoch 184/300\n",
            "90/90 [==============================] - 2s 21ms/step - loss: 0.0320 - acc: 0.8946\n",
            "Epoch 185/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0327 - acc: 0.8931\n",
            "Epoch 186/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0324 - acc: 0.8950\n",
            "Epoch 187/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0324 - acc: 0.8926\n",
            "Epoch 188/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0334 - acc: 0.8908\n",
            "Epoch 189/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0324 - acc: 0.8938\n",
            "Epoch 190/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0325 - acc: 0.8938\n",
            "Epoch 191/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0325 - acc: 0.8926\n",
            "Epoch 192/300\n",
            "90/90 [==============================] - 1s 15ms/step - loss: 0.0330 - acc: 0.8927\n",
            "Epoch 193/300\n",
            "90/90 [==============================] - 2s 22ms/step - loss: 0.0317 - acc: 0.8969\n",
            "Epoch 194/300\n",
            "90/90 [==============================] - 2s 19ms/step - loss: 0.0316 - acc: 0.8969\n",
            "Epoch 195/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0329 - acc: 0.8912\n",
            "Epoch 196/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0326 - acc: 0.8933\n",
            "Epoch 197/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0326 - acc: 0.8922\n",
            "Epoch 198/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0324 - acc: 0.8940\n",
            "Epoch 199/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0326 - acc: 0.8931\n",
            "Epoch 200/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0330 - acc: 0.8919\n",
            "Epoch 201/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0313 - acc: 0.8971\n",
            "Epoch 202/300\n",
            "90/90 [==============================] - 2s 19ms/step - loss: 0.0321 - acc: 0.8942\n",
            "Epoch 203/300\n",
            "90/90 [==============================] - 2s 22ms/step - loss: 0.0316 - acc: 0.8969\n",
            "Epoch 204/300\n",
            "90/90 [==============================] - 1s 15ms/step - loss: 0.0321 - acc: 0.8938\n",
            "Epoch 205/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0324 - acc: 0.8950\n",
            "Epoch 206/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0324 - acc: 0.8932\n",
            "Epoch 207/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0320 - acc: 0.8955\n",
            "Epoch 208/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0320 - acc: 0.8953\n",
            "Epoch 209/300\n",
            "90/90 [==============================] - 1s 16ms/step - loss: 0.0316 - acc: 0.8961\n",
            "Epoch 210/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0317 - acc: 0.8967\n",
            "Epoch 211/300\n",
            "90/90 [==============================] - 1s 15ms/step - loss: 0.0316 - acc: 0.8975\n",
            "Epoch 212/300\n",
            "90/90 [==============================] - 2s 22ms/step - loss: 0.0318 - acc: 0.8964\n",
            "Epoch 213/300\n",
            "90/90 [==============================] - 2s 19ms/step - loss: 0.0312 - acc: 0.8988\n",
            "Epoch 214/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0316 - acc: 0.8970\n",
            "Epoch 215/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0310 - acc: 0.8986\n",
            "Epoch 216/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0311 - acc: 0.8986\n",
            "Epoch 217/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0312 - acc: 0.8977\n",
            "Epoch 218/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0315 - acc: 0.8976\n",
            "Epoch 219/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0313 - acc: 0.8971\n",
            "Epoch 220/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0314 - acc: 0.8966\n",
            "Epoch 221/300\n",
            "90/90 [==============================] - 2s 19ms/step - loss: 0.0316 - acc: 0.8962\n",
            "Epoch 222/300\n",
            "90/90 [==============================] - 2s 22ms/step - loss: 0.0307 - acc: 0.8989\n",
            "Epoch 223/300\n",
            "90/90 [==============================] - 1s 15ms/step - loss: 0.0318 - acc: 0.8946\n",
            "Epoch 224/300\n",
            "90/90 [==============================] - 2s 21ms/step - loss: 0.0312 - acc: 0.8974\n",
            "Epoch 225/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0313 - acc: 0.8972\n",
            "Epoch 226/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0313 - acc: 0.8981\n",
            "Epoch 227/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0319 - acc: 0.8948\n",
            "Epoch 228/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0315 - acc: 0.8962\n",
            "Epoch 229/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0313 - acc: 0.8967\n",
            "Epoch 230/300\n",
            "90/90 [==============================] - 2s 18ms/step - loss: 0.0322 - acc: 0.8947\n",
            "Epoch 231/300\n",
            "90/90 [==============================] - 2s 22ms/step - loss: 0.0301 - acc: 0.9015\n",
            "Epoch 232/300\n",
            "90/90 [==============================] - 2s 17ms/step - loss: 0.0302 - acc: 0.9005\n",
            "Epoch 233/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0306 - acc: 0.8993\n",
            "Epoch 234/300\n",
            "90/90 [==============================] - 1s 15ms/step - loss: 0.0310 - acc: 0.8985\n",
            "Epoch 235/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0307 - acc: 0.8997\n",
            "Epoch 236/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0303 - acc: 0.9009\n",
            "Epoch 237/300\n",
            "90/90 [==============================] - 1s 15ms/step - loss: 0.0311 - acc: 0.8977\n",
            "Epoch 238/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0303 - acc: 0.9000\n",
            "Epoch 239/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0305 - acc: 0.9000\n",
            "Epoch 240/300\n",
            "90/90 [==============================] - 2s 21ms/step - loss: 0.0308 - acc: 0.8990\n",
            "Epoch 241/300\n",
            "90/90 [==============================] - 2s 21ms/step - loss: 0.0312 - acc: 0.8983\n",
            "Epoch 242/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0305 - acc: 0.9002\n",
            "Epoch 243/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0308 - acc: 0.8994\n",
            "Epoch 244/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0309 - acc: 0.8981\n",
            "Epoch 245/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0311 - acc: 0.8982\n",
            "Epoch 246/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0309 - acc: 0.8992\n",
            "Epoch 247/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0317 - acc: 0.8973\n",
            "Epoch 248/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0310 - acc: 0.8991\n",
            "Epoch 249/300\n",
            "90/90 [==============================] - 1s 16ms/step - loss: 0.0305 - acc: 0.9003\n",
            "Epoch 250/300\n",
            "90/90 [==============================] - 2s 21ms/step - loss: 0.0306 - acc: 0.9002\n",
            "Epoch 251/300\n",
            "90/90 [==============================] - 2s 19ms/step - loss: 0.0304 - acc: 0.8998\n",
            "Epoch 252/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0308 - acc: 0.9000\n",
            "Epoch 253/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0301 - acc: 0.9025\n",
            "Epoch 254/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0306 - acc: 0.8996\n",
            "Epoch 255/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0301 - acc: 0.9013\n",
            "Epoch 256/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0306 - acc: 0.8996\n",
            "Epoch 257/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0306 - acc: 0.9010\n",
            "Epoch 258/300\n",
            "90/90 [==============================] - 1s 15ms/step - loss: 0.0319 - acc: 0.8949\n",
            "Epoch 259/300\n",
            "90/90 [==============================] - 2s 19ms/step - loss: 0.0312 - acc: 0.8978\n",
            "Epoch 260/300\n",
            "90/90 [==============================] - 2s 22ms/step - loss: 0.0296 - acc: 0.9036\n",
            "Epoch 261/300\n",
            "90/90 [==============================] - 1s 15ms/step - loss: 0.0301 - acc: 0.9013\n",
            "Epoch 262/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0303 - acc: 0.9003\n",
            "Epoch 263/300\n",
            "90/90 [==============================] - 1s 15ms/step - loss: 0.0305 - acc: 0.9002\n",
            "Epoch 264/300\n",
            "90/90 [==============================] - 1s 15ms/step - loss: 0.0302 - acc: 0.9014\n",
            "Epoch 265/300\n",
            "90/90 [==============================] - 2s 25ms/step - loss: 0.0299 - acc: 0.9034\n",
            "Epoch 266/300\n",
            "90/90 [==============================] - 1s 15ms/step - loss: 0.0302 - acc: 0.9003\n",
            "Epoch 267/300\n",
            "90/90 [==============================] - 1s 16ms/step - loss: 0.0309 - acc: 0.8983\n",
            "Epoch 268/300\n",
            "90/90 [==============================] - 2s 22ms/step - loss: 0.0303 - acc: 0.8998\n",
            "Epoch 269/300\n",
            "90/90 [==============================] - 2s 19ms/step - loss: 0.0299 - acc: 0.9014\n",
            "Epoch 270/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0300 - acc: 0.9018\n",
            "Epoch 271/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0297 - acc: 0.9026\n",
            "Epoch 272/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0300 - acc: 0.9023\n",
            "Epoch 273/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0304 - acc: 0.9010\n",
            "Epoch 274/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0304 - acc: 0.8998\n",
            "Epoch 275/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0303 - acc: 0.9011\n",
            "Epoch 276/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0294 - acc: 0.9045\n",
            "Epoch 277/300\n",
            "90/90 [==============================] - 2s 19ms/step - loss: 0.0303 - acc: 0.9006\n",
            "Epoch 278/300\n",
            "90/90 [==============================] - 2s 22ms/step - loss: 0.0305 - acc: 0.8992\n",
            "Epoch 279/300\n",
            "90/90 [==============================] - 1s 15ms/step - loss: 0.0294 - acc: 0.9036\n",
            "Epoch 280/300\n",
            "90/90 [==============================] - 1s 15ms/step - loss: 0.0301 - acc: 0.9018\n",
            "Epoch 281/300\n",
            "90/90 [==============================] - 1s 15ms/step - loss: 0.0300 - acc: 0.9012\n",
            "Epoch 282/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0295 - acc: 0.9030\n",
            "Epoch 283/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0304 - acc: 0.9007\n",
            "Epoch 284/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0299 - acc: 0.9023\n",
            "Epoch 285/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0299 - acc: 0.9026\n",
            "Epoch 286/300\n",
            "90/90 [==============================] - 1s 15ms/step - loss: 0.0294 - acc: 0.9028\n",
            "Epoch 287/300\n",
            "90/90 [==============================] - 2s 22ms/step - loss: 0.0285 - acc: 0.9064\n",
            "Epoch 288/300\n",
            "90/90 [==============================] - 2s 20ms/step - loss: 0.0299 - acc: 0.9016\n",
            "Epoch 289/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0294 - acc: 0.9027\n",
            "Epoch 290/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0294 - acc: 0.9045\n",
            "Epoch 291/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0302 - acc: 0.9013\n",
            "Epoch 292/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0297 - acc: 0.9021\n",
            "Epoch 293/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0304 - acc: 0.8998\n",
            "Epoch 294/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0299 - acc: 0.9023\n",
            "Epoch 295/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0291 - acc: 0.9043\n",
            "Epoch 296/300\n",
            "90/90 [==============================] - 2s 19ms/step - loss: 0.0290 - acc: 0.9059\n",
            "Epoch 297/300\n",
            "90/90 [==============================] - 2s 22ms/step - loss: 0.0289 - acc: 0.9051\n",
            "Epoch 298/300\n",
            "90/90 [==============================] - 1s 16ms/step - loss: 0.0293 - acc: 0.9028\n",
            "Epoch 299/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0289 - acc: 0.9049\n",
            "Epoch 300/300\n",
            "90/90 [==============================] - 1s 14ms/step - loss: 0.0287 - acc: 0.9064\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "accuracy=result_1.history['acc']                    # plotting accuracy vs epochs\n",
        "epochs=range(1,len(accuracy)+1)\n",
        "plt.plot(epochs,accuracy)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "id": "9UX8ogs3E4MN",
        "outputId": "a4451cae-521f-49ee-ded7-280b76ad01f5"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x79ee81040b50>]"
            ]
          },
          "metadata": {},
          "execution_count": 13
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAiwAAAGdCAYAAAAxCSikAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAABT80lEQVR4nO3dd3zU9eHH8dfdJZdFBiE7hIS9lyAxgoqCAlqctYgLqaNStCrWFqyKdkhrf6XU1paquGpV3LsoRAGRABL2JqyQPSC57HH3/f1xyWEkQA6S3BHez8fjHk2+6z7fby/c2880GYZhICIiIuLFzJ4ugIiIiMipKLCIiIiI11NgEREREa+nwCIiIiJeT4FFREREvJ4Ci4iIiHg9BRYRERHxegosIiIi4vV8PF2A1uBwOMjJySE4OBiTyeTp4oiIiEgLGIZBWVkZcXFxmM0nr0PpEIElJyeHhIQETxdDRERETsPhw4fp2rXrSY/pEIElODgYcN5wSEiIh0sjIiIiLWGz2UhISHB9j59Mhwgsjc1AISEhCiwiIiJnmZZ051CnWxEREfF6CiwiIiLi9RRYRERExOspsIiIiIjXU2ARERERr6fAIiIiIl5PgUVERES8ngKLiIiIeD0FFhEREfF6CiwiIiLi9RRYRERExOspsIiIiIjXU2ARERHpYPYXlrNo1QHq7Y5Wud6fluzisy25rXKt09UhVmsWERGRY375zmY2ZJYQ7OfDT85PaNE5pZV1zHxjA6GBvjx19UAiOvkB8Pb6w/xr+T5MJugbcwm9ojq1ZdFPSIFFRESkA8ktrWJDZgkAafuLXYGlus6O1WLGbDYdd45hGPz6vS2syigC4LsDR3jj7guoqKnnsQ+2AfDAuN4eCyugJiERERGvklFQzpAnv+B3n+44rfO/2Jbn+nndgSMA7CssJ2VeKtNf+a7Zc95cd5gl2/PwtZjoHhFEQVkNT3++k0c/2Eqt3cHlA6L5xWW9T6s8rUWBRURExA37C8u55h+r+GJ7XrP7l+8u4JVvD2AYxmld/611mdiq63lzXSbVdXYAXks7yE/+nUZ2SZXruBNdf8n3ypVdUkXW0UrmvL+Vo5V1rNhTSEZBWZPjj1bU8qcluwD41YR+LJo2ErMJvtpVwPYcG538fPjTDUOarZlpTwosIiIiQPqhI3zb0CRyMm+vz2JzVim/+WArlbX1TfYdLKrgntfSefKTHazYU9js+YZh8OmWHP7w2Q4+2pRNVa3dtc/hMPh8q7Nza2WtnbUHjuBwGPxt2V7WHTjCbz7YimEY7M4rY/jvljJr8SbX+/5nzSEefnuzq1YlPiwAgAff2uTaBvDBxuwm5VmwbA+lVXX0iwlm+ugkekR24trh8a79P7u4B+FB1lM+l7Z2WoHlueeeIykpCX9/f5KTk1m3bt0Jj62rq+O3v/0tPXv2xN/fn6FDh7JkyZIzuqaIiHQsFTX1rTai5XQU2KqZ+sJabl20ln2F5Sc9dlt2KQBF5bW8lnaoyb7ffrqD2ob7eCc9q8k+wzDYfLiEe/6Tzn1vbOSFbw7wwFub+PHC1ZRV1wGw8fBRckqrXeek7sxnd34ZxRW1ACzfXch/12byyLubKams4/2N2SxYtofx81fw+IfbeG9DFg4DRnUPZ9KgGADWHzoKwAU9wgFY/N1hLv2/5Tzw1kYOFlXw+tpMAJ740QB8LM5Y8IvLeuPvayYu1J+fjunu5tNsG24HlsWLFzNr1izmzp3Lhg0bGDp0KBMmTKCgoKDZ4x977DH+/e9/8/e//50dO3Zw7733ct1117Fx48bTvqaIiHQcRytqSZmXyrj5K9ibX9bs/o82ZVNb33aB5uXVB6mtd2AY8ObaTB79YCszXk+nus7O2v3FLN2RDzhDx9aGwAKwcMU+DhVXAPDO+sN8tasAS0PTydLt+ZRUOoOGw2Fw3xsbuea5b1m6Ix9fi4nrhsfTOdCX7Tk27nnN+V6fbHbWrsSG+gOQurPAVetj9XF+ZT/24Ta2ZB0rw4Jle6l3GAztGsovLuvFS3eM5NXpozi/e7jrmKmjEnjpjvMJ9vOhqLyWA0UVfLQph/ve3IDdYTC2byQX9opwHZ8UEcSyWZfwyf1jCPLzjvE5JsPNRrbk5GTOP/98/vGPfwDgcDhISEjg/vvvZ/bs2ccdHxcXx29+8xtmzpzp2nbDDTcQEBDA66+/flrX/CGbzUZoaCilpaWEhIS4czsiIuJhX+3K56evrAcg2M+HF6eNJLlHFwCKymuY8u809hVW8OuJ/bjrou5szS6lrt5Bv9gQQgN8ASirrmPZznwu7RtFWOCJmy8Mw+D1NYfYklVKfOcALuodQWKXIC77v+XYqp3NO2YTOBq+GUf36sK3GcWYTLDq15dhtxtc/OevsVrMJEUEsie/nIhOflwzLI5XVh/E7jB4YFxvlu7IZ0eujaeuHsi0C5N48Zv9/P6znfhaTFw5OJafXdyTAXEhbMsu5abn11BeU8+opHA2Hj5Knd3guZvPY9bbm6ipd9AtPJDMI5U8MqEvJZW1vJp2iNp6Bw9f3oe/f51Bbb2DfjHBfDhzNP6+Fte9VtfZefCtTfSJCebBcb0xm0383xe7eW55Bj0igthXWOE69p17Uzg/KZz25s73t1uxqba2lvT0dObMmePaZjabGT9+PGlpac2eU1NTg7+/f5NtAQEBrFq16oyuWVNT4/rdZrO5cxsiIuJFducda4Ipq6nnp698x2t3jqJXZDC3L1rn+mJ9N/0w+bZqXll9EIAQfx9enHY+5yd1ZuYbG1m5p5CITn488+PBXNYvGnAGlOKKWiI6+WEYBn/4bCcvrjrger8Fy/a6fu4REURlrZ0827EmmW8zihuuA1sOl7iCTN+YYBbdMZJpL33Hzlwbixqu+eMRXXlgXG86B/ry5Cc7eH7lfvrGBLs6tc6dPJBbL0h0XX9QfCjP3zaCO17+jnUHnf1MfjQklkmDYkjdGcv7G7PJPFIJwCV9IhkUH8rdF/cgt6SaoQlhBPn58OGmbP46ZViTsALg72th4W0jmmx7+Io+zLy0F2XVdVz0zNfU1DsYmdjZI2HFXW41CRUVFWG324mOjm6yPTo6mry85ntLT5gwgfnz57N3714cDgdLly7l/fffJzc397SvOW/ePEJDQ12vhISWTYojIiItU11nZ/7SPaw/6Oz0+dGmbF5fc4jluwtOOvoldWc+D761EVtDn4yW2NPQDHTfpb0Y3asLFbV2pr6wluv/9S07cm1EdPLDz8fMvsIKXks7CEBEJyu26npuXbSWWW9vZmVDB9ei8hrufi2d1J35VNbWM+P1DYz8/TIWrtjHa2mHXGFlWkoiVw+No1NDc0dEJyuzJ/XjluRuAIztG8k9F/doUs7tOTZXc9DgrqFEBfuz+GcXMHtSP267IJHHrurPH68fjNlsYsr53YgPCyC7pIpbXlxLnd1gwsBo1/W/78JeESy4aRj+vmbG9Yti/k+GYTabePKagfSIDAKgc6AvA2KdNRBRwf4MTQgD4KdjuvPxfWPoGdmy+VFMJhMBVgtRIf78Ypyzn8ojE/q26FxPa/OGqb/97W/cfffd9OvXD5PJRM+ePZk+fTovvfTSaV9zzpw5zJo1y/W7zWZTaBERaUWLVh3g2dS9vPLtAW4Y0ZWXvz3o2ndp30hmXd6XHpFBTfo31NTb+fV7Wygqr2Vw1zDubOisaRgGb647TOrOfOZdP5iokKa17rvznIFlSNdQfn5pT37x5kaW7SxgX2EFYYG+vH7XKP7xVQafbsnFYcCFPbuwaNr5PPDWRr7cke8a9TLz0p7klFTzwcZsfv7fDQT5+XCkobPq/KV78GnoW/Lolf245+KeANTWO6izO1z3cVm/KPrHhjCmdwR+PmauGRbHdweO8OQnO9iWU0pdQ4fawfGhAIT4+3LvJT2Pe34BVgu/uao/P/+vs49Ir6hO/N+NQzGZmh8afOXgWMb2jSTA1+I6JsTflxduH8lDizfxoyGxrT6seOalvZh5aa9WvWZbciuwREREYLFYyM/Pb7I9Pz+fmJiYZs+JjIzkww8/pLq6muLiYuLi4pg9ezY9evQ47Wv6+fnh5+fnTtFFRM5KhmGwPcdGSWUdiV0CSQgPPOnxDofB0p35XNCjC6EBvuTbqukSZHWN/jjZee9uyOKFlfsZ2zeS9zY4Q4Ctut4VVsb0iuC7g0f4enchX+8uxMdsYmzfSKac341x/aL4ZHMuReXOgLBqbyGdA315+duDBFgtrmG1r6w+yK8m9nO9b73dQUbDqJy+McEEWn144faRvL7mEF/uyOdXE/rRLyaE64bH82nDWjYPXd6HAKuFhbeO4ION2fx12R5iGmoMzCYTRypqWbGnkJp6Z1NQbKg/W7NLqQVGJnbmrjHHak6sPmZXZ1YAH4uZ8QOO1fgPjAulpqGz79asUlfH38bAcjKTBsVw9dA4NmeV8OLtIwn29z3p8YHW47+Se0Z24uP7xpzyvc4FbgUWq9XKiBEjSE1N5dprrwWcHWRTU1O57777Tnquv78/8fHx1NXV8d577/GTn/zkjK8pItLRvbM+i1+9twWAIKuFb2dfdtJOpe9tyOKRd7cwvn80N52fwF2vreeOC5N48uqBJzxnW3Ypj3+0jY0N07nvLXAGiJgQf45U1lJb7+DaYXH8dcow9uSX84fPd7I9u5TiilqW7Sxg2c4CekQEub7YAdbsP8LmrFJXDUejjzblMGNsT15LO8Rb32USHuRHbb0Df18zCZ2dYcxkMnFbShK3pSS5zrukTyQ3juhKZLCfq7+F2WzihhFduWFEVwzDcNVMPH/7CFZnFNM5yErf6GCySyqZ9LdvAHi6ocnGHf1jQjCbcA0tjg8LoH/sqQd4mEwmnp063K33khNzu0lo1qxZTJs2jZEjRzJq1CgWLFhARUUF06dPB+D2228nPj6eefPmAbB27Vqys7MZNmwY2dnZPPnkkzgcDn71q1+1+JoiIueqz7cdWyG3otbOpsMljO0bdcLjG4fApu7KZ39DzcVb32Xy8BV9XP+F73AYfLo1l9AAX9bsL+bfK/bhMJyB6Jrh8Sz+7jB2h8FDl/cmNMCXtH3FPDLR2azfNyaY1346CoC9+WW8k57Fm+sy2V/k7Bjr72smwNfC0co6qursxIT4c9dF3RkYF8rdr60nu6SKiQu+cc3YeviI83/7RAefNEj4WMz8+cahJ9z//aYWPx8Ll/Y79ox6RQXz/ozRrvdxV4DVQs/ITq4gd3NyN9fQZWk/bgeWKVOmUFhYyBNPPEFeXh7Dhg1jyZIlrk6zmZmZmM3Hqteqq6t57LHH2L9/P506deLKK6/kP//5D2FhYS2+pohIR1BUXoMJCA+y8vTnOwF49Mr+J+zXUFNvZ+1+Z1NKv5hgduWVsTWr9KSBJT3TOUmYYeAKEdV1Dp5fuZ/iilquGRrH9hwbv/3BOjWTh8bx2FX9iQ7x54bzurI3v4wbRyRgNpuYOCi22ffqHR3Mo1f25xfjevP5llxSd+Uzrn8032YU8dGmHMD55X7XRc4mmAkDY3hvQxbZJVWEBfqS3D2cL7Y7uwMkdQlqySM8bYO7nroJ52QGxoWwt6AcX4uJn4xUn0lPcHseFm+keVhExNu8s/4wf1qyi79OGcbonhG89O0BnlmymwCrhZ+O7s5fl+0B4LWfjuLiPpEYhsG+wgoMwyAhPBB/Xwur9xVx8wtriQz242cX9+D3n+3k8gHRvHD7SNf7bD5cQk5JFRMGxlBUUcOoP6Q2KUeIv49rfhGA0ABfrD5mCstq6BJkpZO/D3Mm9TthKDnde3/k3S1YzCZWz76M6IZOtqv2FnHrorVYLWZevyuZgXEhDJz7BQCzLu/DL8Z5dnG9k3lzXSZz3t/KdcPj+euUYZ4uTofRZvOwiIjI8Wrq7fz63S1Ehfjz6JX92Z1Xxm8+3EZtvYNXvj3I9hwbf/yfcx6O2iqHK6wA/HN5Bhf3ieT1NYd4/KPtgHOI7ct3jOKbvc7mnYt6RTCkaxjg7G+yNauUovIakiKC+Mm/06ipdzC+fxRXDHAOVOgd1Ynqeju5JdX8/ebz+Okr32FvmECktMo53Dgu1J/lj1zapMNpa5k4KIYPNmaT0qOLK6yAcxK2P14/mO4RQYxqmIX13XtTeOu7w9yekniiy3mFn4xMICrYjwt7Rpz6YGkTqmERkXNSRkEZS3cUMH10Ev6+FuwO44T9Enbk2Aj29yEhPJB6u4N6h9Fkkq4//m8XC1fsA+Crhy/h5//dwK6GobpWHzNdgqzkllbzs4t78G56FsUVtXTtHEC+rZo6u8F7My7kkXc2s7+oAquPmdp6B8F+Plh9zBRX1PLXKUO5YkAMg578AsPAdUx4kPW4Tq0AtyR34xfjelNSWUffmGCe+zqDDYeOcusFidz12nrsDoPfXTuI2y7w7pAgHZ9qWERETuGpT3bwzd4iSqpqMZtMvLByPzeOTGDW5X0IC/Tl95/uICkiiAt7RnD1P1YRFxbA/x64iHF/WUFReQ0D40J4YHxvausNnl+5z3Xd33ywjV15ZYQG+BJktZBTWk1uaTXBfj48dHkfxg+I5q9L9/DLCX15c20m76Rncd8bG8gtrSbQauHrX47l/jc3OocB1zjDyZhekQT5+dCroeNn49DaIxW1BPhamP+ToTz24TbXKJYRiZ2JDvF31W58f66NP/94CDtybExRPww5yyiwiMhZ72BRBRHBfq5ZS79v7f5iPt+ay4yxvYhpWFDOMAw2HS4B4OVVB12r6765LpO0fUXcnpLEq2mHMJmc83bUOwwyj1SyZFuea9r2zVmlrvVvAKJD/Mi31ZC23zmV+09GdgXghW+cM6v+aGgs/r4Wzk8K5427LwAgLjSAL7bnkduwOu/kIXFEh/jz2k9H8fWuAipr7fSLDSYy2Dnv1OD4UPYWlGMywazxffhsay4zxvZk0uBYErsEMeX5NKrr7K51eJpz/Xlduf6803vOIp7U+o2XIiJuqK6zU1rZ8mncf2hbdimX/WU5P/vP+mb3z/14O6+mHWLyP1a5Qsqh4krKGjqiNoaVcf2iiAnx52BxJb/7zDmCxjDgu4NHXdd6e/1hAC7u45y23WwCq8XM3Rd1Z/E9KU3ed+qoblwx8Njklz8e0fW4ssWE+jeZH2XKKGeth7+vhUmDY7lhRFcGxh0b3XJJ30gAbjq/G/eP682SBy/mmmHxAAyIC3GtrhsfFnCqxyZy1lENi4h4jGEY/PSV79h0uITUhy8hNtT9L9rUnQU4DOcidd9mFPG3ZXu5tF8UM8b2JKekytWXpLCshvvf3MDKRy5lS8N6MJ0DfTlaWUdEJz/+8pOhrNlfzL2vb8AwoEuQFVt1HXX2Y9381jbM1prcPZyZl/bi1uRE/H3Nrqnmh3cLY2NmCSk9utAjshOJXQx+NCQWq4+Z87p1brb81w2PJ6ekinqHwfCG9WFO5OqhcfSPDaHXCdaN+X4zkEhHo8AiIh6zNbuU1fucTSjrDhxx1Ra4Y01DEwzAXa+up6rOzs5cG3df1J2vdxcAzjk0DhRVcPhIFZuzStnWEFh+NCSOa4fHERXsT1iglQkDY7isXxRf7Srgocv7UFhWwz++zmBMrwhWNCyuB84VdgG6dWk6Tf7Px/bid5/uYNYVfQCwmE384+aTt7+YTCbuu6xlw3lNJtNpTXwm0hEosIiIWypr69l0uITzunU+bjl7d7257rDr58YVe78vr7SahxZvYmhCGLMu73PcENyaejsbMo812VTV2QEoq6lnS3YpX+9yhoxJg2LYlVfGp1ty+d/WXLZklQDOycRGJIa7zjeZTPzzlvPYnlPqqhH5+aU9WX/waJPAMjCu+dEMlw+I5vIBmvBSpC2oD4uItNjb3x0mZd5X3PzCWv78xW7q7Q4+3ZJDSWXTobU7cmzc/MIavtqVf4IrQUVNPR9vynb9vjvPOe35waIKnvpkO2v3F/PP5Rmk7S9m4Yp9THk+jeySKmrrHZTXOPufbMkqpabeQZcgq6tjauPI5K93FbimqR/bN4orBzsnRvt0Sy7bsm1A8wvY+ftaGJEYjslkwmQy4edjabJuTEyIPxGdtPiqSHtTDYuItEhpZR1zPtjqmoDsf1tziejkx5+W7OKW5G784brBgHP6+SufdS40d6Silsv6NV/j8MHGbCpq7VgtZmrtDnbn23hn/WHXhGvvrs/C3jBNlL+vmY2ZJVzVcN3SqjquHRbvmjflgh5duP68eJbtzKdr50D+/MVuXvzmAFV1dqJD/BgYF0LPyE4E+Fpca9j4+ZjpHdV8X5AfCg+yEhvqT25pNYPiNdeTiCeohkVEjmMYBj+cU3JVRhF2h0Fil0D8fMzklFbzwjf7AVjfMJLG4TC4/42NrnP2FpQfdx2AertzbRuAe8f2BJyL4M39eDu19Q6CrBbKauqdw3pjgvnywUsYFB9CSWUdJZV1GIYz8LybngVAco9wxvWPZt71Q7iqoSalsXno52N7YTKZCLBauHpoHAAmk3MUj4+l5f8ENjYDDYg7szVpROT0qIZFRJoosFXz01e/c4aCn4929RtZscfZgfXy/tHsLShnxZ5C1yyrGYXlVNfZ+e/aTNL2F+NjNlHvMLA7DPJs1cSGBuBwGBRX1OJjNrFkex6ZRyoJD7Iy45KevLkuk8KyGipr7cSHBfDanaO46tlvqK5z8NPR3enWJZB3772Qd9Oz6No5gM6BVhatOkBGQTlWH7MrpAAkdgkkPiyA7JIqRnUPbzKb6++vG8Q9l/QgLjSAAKt7/W8eGNeHEH9fpnn5FPIiHZUCi4hgGAa/+XAb23NsHK2oJfNIJQCbs0o4PykcwzBYucfZH+TiPpHEhQU06YRqdxh8sT2PZ5Y418t58uqBvL7mELvyytiRY2P9waM888UuDh+pavK+d1yYRIDVQt/oYArLagC4ZlgcPSM78eLt57M5q4Trz3OOHPL3tXDr98LHs1OHN3svJpOJB8f35v0N2Tzz4yGYvzfdvq/FTM8TDAk+lcFdQ5mvRe9EPEaBRaSD2ZpVyr9WZPDIhH50jwhq0Tm5pdW8sTbzuO1r9hVzflI4e/LLybNV4+9rZlT3cOI7B8CnzmMa+6A89ckOauodjO7VhVuSu7Hh0FF25ZXxf1/uYWeurcl1/X3N9I0JYVpKEgB9ooNZ1dBB9trhzoAypncEY3qf3kJzN45M4EZNPS/SoSiwiHQwf1m6m+W7Cymrruc/dya7theW1fDehiymjupGUXkN//gqg/sv60WPyE6ueUniwwK44bx46hwG/1q+j7T9xdw/rjefb80FILl7F/x9LfSICOKi3hHklFSR0rMLr6/JdDUP3X1RD0wmEwPiQnh/Y7YrrEwdlcDjPxqA1WI+ru9IY/+Q/rEhmmdERJqlwCLSgVTV2klrmIjtm71FrDtwhMHxoVh9zNz7ejrph45yoLCC/LJqlu8uJKekisU/S3EFlgt7dmHWFX3JKCjnX8v3kX7oKNklVbzY0Lm2sXnGZDK5wtBHm7J5fY2zdiaikx9jejlrRQZ8byhwgK+F2RP7E2ht/p+cq4fFkVtaxeUDYprdLyKiwCLSgazeV0RNw0q+AFOeT8MwnOFhR0NNxwcbs6lzOI9Ze+AIq/cVsS2nYV6Srs4RMD0jg4gM9qOwrIZ7/5NORa2dwfGhTB4Sd9x7fn+tm6uHxrlqT74/d8kNI+IJDfQ9Ybl9LeYWz/YqIucmDWsWOUu98u0BJvx1Jd8dPOLa9tUu50ie8f2jCLJaaBxR3BhWgv18qLU7MIxjE6z9dekeVw1LY/gwmUxc0LDi79aGfY9e2b9JB9ZG3SOCCGsII401MACdg6wMjg/F39fM9NHdW+u2ReQcpRoWES+3dn8xL646wGX9ojhaWcuGQ0fp5OfDh5tyAHho8Sa+fOhiAnwtfN0QWG5O7sZT1wxyrYL875X7iOjkx6D4EB5avBmA314ziN9+usO1GrHZBP1jj/UfuXlUN9L2FdEjohM3jUogpWeXZstnMZtYNG0kxeW1rjV2Gr1+ZzLltfVaPVhEzpgCi4gX+HBjNkkRQQxrWK33/Q1ZPL9yP/+85Tz+umwPa/YfYemO46e5D/C1kHW0ir98uYdbkruRU1qN1cdMSo8IAqwWV1D4203OIcC19Q7eXHcYX4uJqaO6UWCr5tmvMgDoGdmpSR+TlJ5dWP/Y5S0q//fX4/m+0EDfkzYFiYi0lAKLiIel7SvmwcWbCA3wJW3OZZhNJn7/2U6OVNTyxtpMtmQ5m2S6hQfSOcjKpEExHCyqoF9MMIkRQUx/+Tv+k3aIpIaVg4d2DT3hpGhWHzNv/yzF9fuMsb14b0M22SVVza6rIyLiLRRYRDzAVl3Hw29vZkRiZw43TNJWWlXHhxtzsJhxDRF+Jz2Lylo7wX4+LP/l2OP6kBiG4ZrV9YVvDgC4VhluiQCrhb9OGca8/+3klgu6tdLdiYi0PgUWkTawv7CcqBB/Ovk1/ye2YOlelu7IZ9nOfDp9rxnmpW8P8P1IUlrl7IMyrFtYsx1eTSYTo3t14e31Wa7Zac9LbHlgARjVPZwPfj7arXNERNqbRgmJnIb0Q0f594p9rpWLG1XU1DPn/S1c9pcVTHtpnWvhP4fDoKzaGT4yCsp4Le0gAIYBZTX1hAb4Emi1kFFQzt6CcoKsFuJC/V3XHX6SWpPRvZrOButODYuIyNlCNSwibrI7DGb+dwN5tmrCg6zcODKBjIIyfvvpTtbsK6bW7pzjJP3QUb7NKMZkgt9+soN9heV8OHM0z6/cT73DYFhCGFuySnAYMHFgDAnhATz7VQYjEztz/2W9+XhzNm+uOwzA8G5hJyzPhT2PBZZu4YFEBvu16f2LiHiCAouIm77NKCLPVg3A4u8O4+dr4Vfvbqa6zhlUuoUHkhQRxMo9hcx6exMFDYv6AazYU0j6Iecw4tmT+vH1rgJe/vYgNyd3Y2hCWJPJ0wrKqo8FlobRQ82JDPajX0wwu/LKGOFmc5CIyNlCgUWkQVWtnWe+2MXVQ+NO2gTz3oYs18/rDx1l0+ES6h0GF/WOYO7kAfSM7ETW0Sou+fPXTcIKOMNOdolzxeIBcSEkdw/nVxP7YWmmf8olfSKJDfVnQGwIYYHWk5b9hvO68ofPd3LV4Fh3bllE5KxhMhob2c9iNpuN0NBQSktLCQkJOfUJIs14dfVB5n68nX4xwSx58OJmjymtqiP56WVU1znoERHE/qIKACYNiuG5m89r0jH26c938ta6TB7/0QBiQwO4ddFa175u4YGs/NWlpyyTYRiYTMeHmeaOs1XVa84TETmruPP9rU63Ig3WNUxxvyuvjIMNQeT7ckqquPmFNVTXOegV1Yknrx4IQI/IIJ758ZDjRvE8emV/Nj1xBTeOTHCtRtzoh7+fSEvCSuNxCisi0pEpsIjgrKFIb5iiHuB/2/IwDIMvt+fx6uqDOBwGM/67ge05NroEWXnmx0O4uE8k7//8Qj6YMZpg/+bDQmOI6RxkbTLq5/srGYuIyKmpD4sIkF1S5epIC85+Kqv3FfHN3iIAMo9UsvlwCVaLmQ9njiYh3DmrrDtDiAfEhZJTWt3wswKLiIg7FFjknLUjx8b7G7LYX1SBv6+zsrFbeCCHj1aSUVBORkG569hFq5yzyF4+INoVVtw1MC6EZTvzG37WNPgiIu5QYJFz0rbsUm5cmEZVnb3J9vH9oymuqOGL7XlcOyyeqaO6ccuLaymvqQfgxyO7nvZ7Nq5kHB5kJTpEc6WIiLhDgUU6vLLqOqpq7USFOPuQHKmo5Z7X1lNVZ2dEYmciOln5Yruz5uP8pM5M+sHQ4JuTu/H8yv1EBftx0Q9mlXXHJX0iuXFEV5J7dGlxZ1oREXFSYJGzzpasEqpq7ST36AJAdZ2dd9YfZnuOjZp6B90jgrjp/ASiQvypszu47p+ryTpayXszLmRgXCgfbswmp7Sa7hFBvDTtfIL8LMz9eDu78sq4qE/kce8345Ke5JVWc9WQWHwsp99P3epj5s83Dj3t80VEzmUKLHJWqbc7uG3ROipq6ln5q0uJCwvg5W8P8qclu5ocl1FQzrNTh/PhxmxXX5SH397Mx/eNYUeuDYCrh8a5hgL/4brBJ3zPzkFWnp06vI3uSEREWkLDmuWscvhoFaVVddQ7DL7ZWwjAku15AFwzLI6fXdwDgK93F1BdZ+efy/e5zt2VV8bzK/exsyGw9NfQYhGRs4YCi5xV9n1v5M7KvUXk26rZfLgEgN9c1Z9fTexHeJCVsup6nvpkBweKKggL9OWphkne3tuQzd585zVaOnmbiIh4ngKLnFX2FR4LLN9mFPHlDmdn2WEJYUQF+2Mxm7ikoR/Km+syAbhrTHeuGRaH2QQHiiqotTsI9vOha+eA9r8BERE5LQos4hW2ZpXyk3+nMeP1dD7cmO3a/tmWXCb97RtW7nE2/+wvPDZlfkllHQsbmnwuHxDt2j6277GOsxGdrEwf3Z2wQCtDuoa5tveLDdZIHRGRs4g63YpXeP6b/aw74FzL54vteYztG8mHG7N58pMdAPzjqwwu7hPpqmHx9zVTXedwrXw8YeCxwHJJn0jMJnAYcP9lvQnyc37ML+4dwaaG5iP1XxERObuohkU8zuEwWJ1RdOx3AzZmlvD7z3a6tq07eITskipXYLnn4p4AJHYJ5C83DqVXVLDr2LBAK7+e2I+bzk9g6qhuru3fH7KswCIicnZRDYt43M48G8UVtQRZLQzv1plVGUV8vDmHeodBTIg/iV0CWXvgCK+tPsjRyjrAOTfKnaO7E+zvc9wqyQA/u6TncduGJYQR7O9DWXU9g+M1Nb6IyNlENSzSLrJLqrj9pXU8/PZmDMNosu/bhtqV5B5dXIsCftEwVHlgXAjXDo8H4N8r9wMQHxZAgNVCaKBvs2HlRHwtZv596wjmXT/YNU2+iIicHRRYpM3tyrMx+e+rWLmnkPc2ZLE1u7TJ/lUZxQCM7hVB76hOAFTWOtf4GRAXwqRBMfj5HPuo9ogMOu2yXNgrokkzkYiInB0UWKTNLfrmAEcqammsDHkvPcu1r7K2nnUHnIHlot4R9IkObnLuwLgQwgKtvDhtJAnhzmHIwxPC2qXcIiLiPRRYpM3tL3IORb7+POdKxx9vzqG23gHAR5tyqK5zkNglkN5RnejVUMPSaECss+nmot6RpM4ay7v3pnDfZb3bsfQiIuINFFikzR1sCCy3XZBIZLAfRyvr+HJHHoZh8J+0QwDcmpyIyWQi6HsTugX7+bhqVcC5eODIpHCsPvrYioica/Qvv7QpW3UdxRW1APSM6sRPRjprWR77cBuvpR1iR64NPx8zPx7R1XVOY7NQ/7gQTe4mIiKAAou0scbalYhOfnTy8+H+y3ozNCGMkso65n68HYDJQ+PoHGR1nTO0YUbaEYmd2728IiLinTQPi7Spg8WVAHSPCATA39fCC7eNYMrzazhaWcukQTHMntS/yTn3XNyDuDB/rhwc2+7lFRER76TAIq3m610F/HXZHp6+7tg8J401LEldjg1FjgrxJ3XWJZhMNNvkE2C1cOPIhPYptIiInBXUJCSt5vmV+9mSVcpjH26jtKqOZTvyyShwTqWfFNF07hSz2aT+KSIi0mKnFViee+45kpKS8Pf3Jzk5mXXr1p30+AULFtC3b18CAgJISEjgoYceorq62rX/ySefxGQyNXn169fvdIomHlJTb2dD5lEANh0uYdxflnPXa+v5eHMO0LSGRURExF1uNwktXryYWbNmsXDhQpKTk1mwYAETJkxg9+7dREVFHXf8G2+8wezZs3nppZe48MIL2bNnD3fccQcmk4n58+e7jhs4cCDLli07VjAftVadTbZmlVLTMLcKQFF5bZP9SQ19WERERE6H26lg/vz53H333UyfPh2AhQsX8tlnn/HSSy8xe/bs445fvXo1o0eP5uabbwYgKSmJqVOnsnbt2qYF8fEhJibmdO5BvMDaA0cAuLBnFwrKagiyWugeEcSHm1TDIiIiZ86twFJbW0t6ejpz5sxxbTObzYwfP560tLRmz7nwwgt5/fXXWbduHaNGjWL//v18/vnn3HbbbU2O27t3L3Fxcfj7+5OSksK8efPo1k1rvnir0so67vnPepK6BPHHGwazZr9zev3LB0QzLSUJs9lEdZ0duwGxof4E+anGTERETp9b3yJFRUXY7Xaio6ObbI+OjmbXrl3NnnPzzTdTVFTEmDFjMAyD+vp67r33Xh599FHXMcnJybzyyiv07duX3NxcnnrqKS666CK2bdtGcHDwcdesqamhpqbG9bvNZnPnNuQMGYbBbz7cytoDR1h74AiX9osk/ZCz/0py9y6uFZT9fS38fepwTxZVREQ6iDYfJbR8+XKefvpp/vnPf7Jhwwbef/99PvvsM373u9+5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g0VERKQtKbCcgcYhzbGh/vhY9ChFRETair5lz8CxEUJqDhIREWlLCixn4PCRxhFCGtIsIiLSlhRYzsCuvDIAekd38nBJREREOjYFljOwM88GQP/YEA+XREREpGNTYDlNVbV2DhZVANA/NtjDpREREenYFFhO0+78MhwGdAmyEtnJz9PFERER6dAUWE7TztxjzUEmk8nDpREREenYFFhO0y5XYFFzkIiISFs7rcDy3HPPkZSUhL+/P8nJyaxbt+6Ex44dOxaTyXTc66qrrnIdYxgGTzzxBLGxsQQEBDB+/Hj27t17OkVrNztznSOE1OFWRESk7bkdWBYvXsysWbOYO3cuGzZsYOjQoUyYMIGCgoJmj3///ffJzc11vbZt24bFYuHGG290HfPMM8/w7LPPsnDhQtauXUtQUBATJkygurr69O+sDRmGoRFCIiIi7cjtwDJ//nzuvvtupk+fzoABA1i4cCGBgYG89NJLzR4fHh5OTEyM67V06VICAwNdgcUwDBYsWMBjjz3GNddcw5AhQ3jttdfIycnhww8/PKObaytHK+soq64HoHtEkIdLIyIi0vG5FVhqa2tJT09n/Pjxxy5gNjN+/HjS0tJadI1FixZx0003ERTk/KI/cOAAeXl5Ta4ZGhpKcnLyCa9ZU1ODzWZr8mpP2Q1T8kcG++Hva2nX9xYRETkXuRVYioqKsNvtREdHN9keHR1NXl7eKc9ft24d27Zt46677nJtazzPnWvOmzeP0NBQ1yshIcGd2zhj2SXOKfm1hpCIiEj7aNdRQosWLWLw4MGMGjXqjK4zZ84cSktLXa/Dhw+3UglbpnHRw66dFVhERETag1uBJSIiAovFQn5+fpPt+fn5xMTEnPTciooK3nrrLe68884m2xvPc+eafn5+hISENHm1J9cqzQosIiIi7cKtwGK1WhkxYgSpqamubQ6Hg9TUVFJSUk567jvvvENNTQ233nprk+3du3cnJiamyTVtNhtr16495TU9JbukoYZFTUIiIiLtwsfdE2bNmsW0adMYOXIko0aNYsGCBVRUVDB9+nQAbr/9duLj45k3b16T8xYtWsS1115Lly5dmmw3mUw8+OCD/P73v6d37950796dxx9/nLi4OK699trTv7M2dKxJKNDDJRERETk3uB1YpkyZQmFhIU888QR5eXkMGzaMJUuWuDrNZmZmYjY3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\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}